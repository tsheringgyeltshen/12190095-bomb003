(gdb) b phase_1                                                                                 //Set up break point
Breakpoint 1 at 0x400e8d
(gdb) r
Starting program: /home/guest/Desktop/12190095/Assignment 1/bomb003/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
hi

Breakpoint 1, 0x0000000000400e8d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp                                                   //building stack frame with 8 more bytes
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi                                              //what is this being moved?
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>                                //will compare input string with answer
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.

//Lets examine what is being moved from address 0x4023b0. We know it has to be a string of some sort so we use '/s':

(gdb) x/s 0x4023b0
0x4023b0:	"Border relations with Canada have never been better."
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.


(gdb) ni 3
0x0000000000400e9b in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
=> 0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.

//Looking at %eax, we see it is = 1, so it will call the bomb.

(gdb) i r
rax            0x1                 1                                                   //%eax required is 0 and here it is 1 and bomb will explode.
rbx            0x4021e0            4202976
rcx            0x2                 2
rdx            0x1                 1
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492
rbp            0x0                 0x0
rsp            0x7fffffffde70      0x7fffffffde70
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7ffff7df7400      140737352004608
r12            0x400c60            4197472
r13            0x7fffffffdf70      140737488346992
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) r bomb.txt                                                  //Lets try using the string we found in the disassembler code and see the value of %eax for it:
The program being debugged has been started already.              //"Border relations with Canada have never been better."
Start it from the beginning? (y or n) y
Starting program: /home/guest/Desktop/12190095/Assignment 1/bomb003/bomb bomb.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.

Breakpoint 1, 0x0000000000400e8d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
   0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) ni 3
0x0000000000400e9b in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:	sub    $0x8,%rsp
   0x0000000000400e91 <+4>:	mov    $0x4023b0,%esi
   0x0000000000400e96 <+9>:	callq  0x40132b <strings_not_equal>
=> 0x0000000000400e9b <+14>:	test   %eax,%eax
   0x0000000000400e9d <+16>:	je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:	callq  0x40142a <explode_bomb>
   0x0000000000400ea4 <+23>:	add    $0x8,%rsp
   0x0000000000400ea8 <+27>:	retq   
End of assembler dump.
(gdb) i r
rax            0x0                 0                                   //%rax is equal to 0! which means it will jump pass the explode_bomb.
rbx            0x7fffffffdf58      140737488346968
rcx            0x34                52
rdx            0x0                 0
rsi            0x4023b0            4203440
rdi            0x4023e4            4203492
rbp            0x0                 0x0
rsp            0x7fffffffde50      0x7fffffffde50
r8             0x6037a0            6305696
r9             0x7c                124
r10            0xfffffffffffff6ed  -2323
r11            0x7ffff7df7400      140737352004608
r12            0x400c60            4197472
r13            0x7fffffffdf50      140737488346960
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) 


So solution is Border relations with Canada have never been better.

